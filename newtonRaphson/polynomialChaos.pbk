<languageVersion : 1.0;>

kernel NewtonRaphson
<   namespace : "com.om-labs.filters.newtonRaphson";
    vendor : "Om Labs";
    version : 1;
    description : "Newton Raphson Fractals";
>
{
    parameter float2 size<
        minValue:float2(0,0);
        maxValue:float2(1000,1000);
        defaultValue:float2(500,500);
    >;
    
    parameter float4 colorStart<
        minValue:float4(0);
        maxValue:float4(1);
        defaultValue:float4(1);
    >;
    
    parameter float4 colorEnd<
        minValue:float4(0);
        maxValue:float4(1);
        defaultValue:float4(0,0,0.8,1);
    >;
    
    parameter float2 rangeX<
        minValue:float2(-10);
        maxValue:float2(10);
        defaultValue:float2(-5,5);
    >;
    
    parameter float2 rangeY<
        minValue:float2(-10);
        maxValue:float2(10);
        defaultValue:float2(-5,5);
    >;
    
    parameter float c0<
        minValue:float(-10);
        maxValue:float(10);
        defaultValue:float(0);
    >;

    parameter float c1<
        minValue:float(-10);
        maxValue:float(10);
        defaultValue:float(0);
    >;
    
    parameter float c2<
        minValue:float(-10);
        maxValue:float(10);
        defaultValue:float(0);
    >;
    
    parameter float c3<
        minValue:float(-10);
        maxValue:float(10);
        defaultValue:float(0);
    >;
    
    parameter float c4<
        minValue:float(-10);
        maxValue:float(10);
        defaultValue:float(0);
    >;
    
    parameter float c5<
        minValue:float(-10);
        maxValue:float(10);
        defaultValue:float(0);
    >;
    
    parameter float c6<
        minValue:float(-10);
        maxValue:float(10);
        defaultValue:float(0);
    >;
    
    parameter float c7<
        minValue:float(-10);
        maxValue:float(10);
        defaultValue:float(0);
    >;    
    
    parameter float toleranceInversePower<
        minValue:float(1);
        maxValue:float(10);
        defaultValue:float(3);
    >;
    
    parameter float iterations<
        minValue:float(1);
        maxValue:float(40);
        defaultValue:float(5);
    >;
    
    parameter float shades<
        minValue:float(1);
        maxValue:float(1000);
        defaultValue:float(10);
    >;
    
    dependent float tolerance;
    output pixel4 dst;

    region generated(){
        return region(float4(0, 0, size.x, size.y));
    }
    
    void evaluateDependents(){
        tolerance = pow(10.0,-toleranceInversePower);
    }
    
    float2 muli(in float2 u,in float2 v){
        float uv0 = u[0]*v[0];
        float uv1 = u[1]*v[1];
        return float2(uv0-uv1,uv0+uv1);
    }
    
    float2 f(in float2 z, out float2 fz){
        float2 z2 = muli(z,z);
        float2 z3 = muli(z2,z);        
        float2 z4 = muli(z3,z); 
        float2 z5 = muli(z4,z); 
        float2 z6 = muli(z5,z); 
        float2 z7 = muli(z6,z); 
        fz =  c7*z7 + c6*z6 + c5*z5 + c4*z4 + c3*z3 + c2*z2 + c1*z + c0;
        float2 fdz = 7.0*c7*z6 + 6.0*c6*z5 + 5.0*c5*z4 + 4.0*c4*z3 + 3.0*c3*z2 + 2.0*c2*z + c1;
        return muli(fz,float2(fdz[0],-fdz[1]))/(fdz[0]*fdz[0] - fdz[1]*fdz[1]);//division i assume possible error here
    }
    
    void evaluatePixel(){
        float2 pos = outCoord();
        pos = float2(mix(rangeX[0],rangeX[1],pos.x/size[0]),mix(rangeY[0],rangeY[1],pos.y/size[1]));
        
        float curIterations;
        float2 fz;
        for(curIterations=0.0; curIterations<iterations; curIterations++){
            pos -= f(pos,fz);
            if(fz[0] < tolerance){
                break;
            }
        }

        dst = mix(colorStart,colorEnd,curIterations/shades);
    }
    

}
