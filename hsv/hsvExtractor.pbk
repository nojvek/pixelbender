<languageVersion : 1.0;>

kernel HSBFilter
<   namespace : "Your Namespace";
    vendor : "Your Vendor";
    version : 1;
    description : "your description";
>
{
    parameter float2 hueRange
    <
        minValue:float2(0.0);
        maxValue:float2(360.0);
        defaultValue:float2(0.0,360.0);
    >;
    
    parameter float2 saturationRange
    <
        minValue:float2(0.0);
        maxValue:float2(1.0);
        defaultValue:float2(0.0,1.0);
    >;
    parameter float2 brightnessRange
    <
        minValue:float2(0.0);
        maxValue:float2(1.0);
        defaultValue:float2(0.0,1.0);
    >;
    
    input image4 src;
    output pixel4 dst;

    void
    evaluatePixel()
    {
        
        //RGBtoHSV
        pixel4 color = sampleNearest(src, outCoord());
        float r = color.r;
        float g = color.g;
        float b = color.b;
        
        float maxColor = max(r,max(g,b));
        float minColor = min(r,min(g,b));
        float hue = 0.0;
        float saturation = 0.0;
        float brightness = maxColor;
        float colorDiff;
        float colorAngle;
        
        if(maxColor > minColor){
            
            if(r==minColor){
                colorDiff = g-b;
                colorAngle = 3.0;
            }else if (g==minColor){
                colorDiff = b-r;
                colorAngle = 5.0;
            }else{
                colorDiff = r-g;
                colorAngle = 1.0;
            }
            
            float colorRange = maxColor - minColor;
            
            hue = (colorAngle-colorDiff/colorRange)*60.0;
            if(hue >= 360.0) hue -= 360.0;
    
            saturation = colorRange/maxColor;
        }
        
        if(hue >= hueRange[0] && hue <= hueRange[1] && 
            saturation >= saturationRange[0] && saturation <= saturationRange[1] &&
            brightness >= brightnessRange[0] && brightness <= brightnessRange[1]){
            dst = color;
        }
        
    }
}
